[{"title":"v1.6.0","type":0,"sectionRef":"#","url":"/blog/2020/02/25/v1.6.0","content":"","keywords":""},{"title":"New​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#new","content":"Docs now get automatically built (old jsdocs)Flexible mountsExpose NodeCG routerp5.js Tutorial "},{"title":"Update​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#update","content":"Docket now on Node 10 "},{"title":"Fix​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#fix","content":"Check if bundle package.json has versionTypo in replicants description (objcts → objects)Clone replicant default value "},{"title":"Thanks to​","type":1,"pageTitle":"v1.6.0","url":"/blog/2020/02/25/v1.6.0#thanks-to","content":"SeldszarDan-ShieldsVodBoxMyselfHoishinLange for making this update happen! Version comparison here "},{"title":"New Docs!","type":0,"sectionRef":"#","url":"/blog/2020/02/26/New-Docs","content":"","keywords":""},{"title":"Thanks to​","type":1,"pageTitle":"New Docs!","url":"/blog/2020/02/26/New-Docs#thanks-to","content":"Everyone on the NodeCG discord for testingMyselfLange for making this update happen! "},{"title":"Assets","type":0,"sectionRef":"#","url":"/docs/assets","content":"Assets The Asset system enables bundle authors to provide a means for end users to upload custom files from the dashboard for use in the bundle. To enable the Asset system in a bundle, add code like the following to your bundle's package.json: { &quot;name&quot;: &quot;test-bundle&quot;, &quot;nodecg&quot;: { &quot;assetCategories&quot;: [ { &quot;name&quot;: &quot;thumbnails&quot;, &quot;title&quot;: &quot;Thumbnails&quot;, &quot;allowedTypes&quot;: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;] }, { &quot;name&quot;: &quot;boxart&quot;, &quot;title&quot;: &quot;Boxart&quot;, &quot;allowedTypes&quot;: [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;] } ] } } NodeCG will automatically create a Replicant for each assetCategory in a bundle. To access these asset Replicants, declare them as you would any other Replicant in your bundle. For example: const thumbnails = nodecg.Replicant('assets:thumbnails'); const boxart = nodecg.Replicant('assets:boxart'); These Replicants are arrays. Each item in these arrays describes one of the uploaded files: { &quot;base&quot;: &quot;square.png&quot;, &quot;namespace&quot;: &quot;test-bundle&quot;, &quot;category&quot;: &quot;thumbnails&quot;, &quot;ext&quot;: &quot;.png&quot;, &quot;name&quot;: &quot;square&quot;, &quot;sum&quot;: &quot;3f5828ff83eb099fe11a938f25e57afe8745efdc&quot;, &quot;url&quot;: &quot;/assets/test-bundle/thumbnails/square.png&quot; } ","keywords":""},{"title":"Bundle Configuration","type":0,"sectionRef":"#","url":"/docs/bundle-configuration","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Bundle Configuration","url":"/docs/bundle-configuration#example","content":"Say we have a bundle named test-bundle. If we create./cfg/test-bundle.json with the following contents: { &quot;myData&quot;: &quot;hello&quot; }  ... that data can be accessed via bundleConfig: console.log(nodecg.bundleConfig.myData); // prints &quot;hello&quot;  "},{"title":"JSON Schema​","type":1,"pageTitle":"Bundle Configuration","url":"/docs/bundle-configuration#json-schema","content":"If your bundle has a configschema.json file in its root, NodeCG will validate the config file (if any) for your bundle against this JSON Schema, and will throw errors on startup if the config file fails to pass validation. This is often the most efficient way to enforce a specific structure for your bundle's config. See Understanding JSON Schemafor more information on what a JSON Schema is and how to use one. "},{"title":"findCue","type":0,"sectionRef":"#","url":"/docs/classes/findCue","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"findCue","url":"/docs/classes/findCue#parameters","content":"Name\tType\tDescriptioncueName\tString\t "},{"title":"getDialogDocument","type":0,"sectionRef":"#","url":"/docs/classes/getDialogDocument","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"getDialogDocument","url":"/docs/classes/getDialogDocument#parameters","content":"Name\tType\tAttributes\tDefault\tDescriptionname\tstring The desired dialog's name. bundle\tstring\t&lt;optional&gt;\tCURR_BNDL\tThe bundle from which to select the dialog. "},{"title":"getDialog","type":0,"sectionRef":"#","url":"/docs/classes/getDialog","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"getDialog","url":"/docs/classes/getDialog#parameters","content":"Name\tType\tAttributes\tDefault\tDescriptionname\tstring The desired dialog's name. bundle\tstring\t&lt;optional&gt;\tCURR_BNDL\tThe bundle from which to select the dialog. "},{"title":"getSocketIOServer()","type":0,"sectionRef":"#","url":"/docs/classes/getSocketIOServer","content":"getSocketIOServer() Extension Only This can only be used in code which runs on the server. getSocketIOServer() Gets the server Socket.IO context.","keywords":""},{"title":"listenFor","type":0,"sectionRef":"#","url":"/docs/classes/listenFor","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"listenFor","url":"/docs/classes/listenFor#parameters","content":"Name\tType\tAttributes\tDefault\tDescriptionmessageName\tstring The name of the message. bundleName\tstring\t&lt;optional&gt;\tCURR_BNDL\tThe bundle namespace to in which to listen for this message. handlerFunc\tfunction The callback fired when this message is received. "},{"title":"log()","type":0,"sectionRef":"#","url":"/docs/classes/log","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"log()","url":"/docs/classes/log#example","content":"nodecg.log.trace('trace level logging'); nodecg.log.debug('debug level logging'); nodecg.log.info('info level logging'); nodecg.log.warn('warn level logging'); nodecg.log.error('error level logging');  "},{"title":"mount()","type":0,"sectionRef":"#","url":"/docs/classes/mount","content":"mount() Extension Only This can only be used in code which runs on the server. mount() Mounts express middleware to the main server express app. See the express docs for usage. This is generally used in tandem Router. See Custom Routes for a full guide.","keywords":""},{"title":"playSound","type":0,"sectionRef":"#","url":"/docs/classes/playSound","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"playSound","url":"/docs/classes/playSound#parameters","content":"Name\tType\tAttributes\tDescriptioncueName\tString opts\tObject\t&lt;optional&gt;\t Opts​ Name\tType\tAttributes\tDefault\tDescriptionupdateVolume\tboolean\t&lt;optional&gt;\ttrue\tWhether or not to let NodeCG automatically update this instance's volume when the user changes it on the dashboard. "},{"title":"NodeCG","type":0,"sectionRef":"#","url":"/docs/classes/nodecg","content":"","keywords":""},{"title":"Members​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#members","content":""},{"title":"(static) declaredReplicants​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#static-declaredreplicants","content":"An object containing references to all Replicants that have been declared in this window, sorted by bundle. E.g., NodeCG.declaredReplicants.myBundle.myRep "},{"title":"bundleConfig​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#bundleconfig","content":"An object containing the parsed content of cfg/&lt;bundle-name&gt;.json, the contents of which are read once when NodeCG starts up. Used to quickly access per-bundle configuration properties. "},{"title":"(readonly) bundleGit​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#readonly-bundlegit","content":"Provides information about the current git status of this bundle, if found. Properties​ Name\tType\tAttribues\tDescriptionbranch\tString What branch this bundle is on. hash\tString The full hash of the commit this bundle is on. shortHash\tString The short hash of the commit this bundle is on. date\tDate\t&lt;optional&gt;\tThe date of the commit this bundle is on. message\tString\t&lt;optional&gt;\tThe message of the commit this bundle is on. "},{"title":"bundleName​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#bundlename","content":"The name of the bundle which this NodeCG API instance is for. "},{"title":"bundleVersion​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#bundleversion","content":"The version (from package.json) of the bundle which this NodeCG API instance is for. "},{"title":"extensions​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#extensions","content":"Extension Only This can only be used in code which runs on the server. Object containing references to all other loaded extensions. To access another bundle's extension, it must be declared as a bundleDependency in your bundle's manifest. // bundles/my-bundle/package.json { &quot;name&quot;: &quot;my-bundle&quot; ... &quot;bundleDependencies&quot;: { &quot;other-bundle&quot;: &quot;^1.0.0&quot; } } // bundles/my-bundle/extension.js module.exports = function (nodecg) { const otherBundle = nodecg.extensions['other-bundle']; // Now I can use `otherBundle`! }  "},{"title":"Logger :Object​","type":1,"pageTitle":"NodeCG","url":"/docs/classes/nodecg#logger-object","content":"Provides easy access to the Logger class. Useful in cases where you want to create your own custom logger. "},{"title":"readReplicant","type":0,"sectionRef":"#","url":"/docs/classes/readReplicant","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"readReplicant","url":"/docs/classes/readReplicant#parameters","content":"Name\tType\tAttributes\tDefault\tDescriptionname\tstring The name of the replicant. bundle\tstring\t&lt;optional&gt;\tCURR_BNDL\tThe bundle namespace to in which to look for this replicant. cb\tfunction Browser only The callback that handles the server's response which contains the value. "},{"title":"Example​","type":1,"pageTitle":"readReplicant","url":"/docs/classes/readReplicant#example","content":"From an extension: // Extensions have immediate access to the database of Replicants. // For this reason, they can use readReplicant synchronously, without a callback. module.exports = function(nodecg) { var myVal = nodecg.readReplicant('myVar', 'some-bundle'); };  From a graphic or dashboard panel: // Graphics and dashboard panels must query the server to retrieve the value, // and therefore must provide a callback. nodecg.readReplicant('myRep', 'some-bundle', value =&gt; { // I can use 'value' now! console.log('myRep has the value ' + value + '!'); });  "},{"title":"Router","type":0,"sectionRef":"#","url":"/docs/classes/router","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Router","url":"/docs/classes/router#example","content":"Defining a simple GET route: module.exports = function (nodecg) { const app = nodecg.Router(); app.get('/my-bundle/example', (req, res) =&gt; { res.send('custom route confirmed'); }); nodecg.mount(app); }  "},{"title":"Replicant","type":0,"sectionRef":"#","url":"/docs/classes/replicant","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"Replicant","url":"/docs/classes/replicant#parameters","content":"Name\tType\tAttributes\tDescriptionname\tstring The name of the replicant. namespace\tstring\t&lt;optional&gt;\tThe namespace to in which to look for this replicant. Defaults to the name of the current bundle. opts\tobject\t&lt;optional&gt;\tThe options for this replicant. Opts​ Name\tType\tAttributes\tDefault\tDescriptiondefaultValue\tany\t&lt;optional&gt; The default value to instantiate this Replicant with. The default value is only applied if this Replicant has not previously been declared and if it has no persisted value. persistent\tboolean\t&lt;optional&gt;\ttrue\tWhether to persist the Replicant's value to disk on every change. Persisted values are re-loaded on startup. persistenceInterval\tnumber\t&lt;optional&gt;\t100\tInterval between each persistence, in milliseconds. schemaPath\tstring\t&lt;optional&gt; The filepath at which to look for a JSON Schema for this Replicant. Defaults to nodecg/bundles/${bundleName}/schemas/${replicantName}.json. Please note that this default path will be URIEncoded to ensure that it results in a valid filename. "},{"title":"Example​","type":1,"pageTitle":"Replicant","url":"/docs/classes/replicant#example","content":"const myRep = nodecg.Replicant('myRep', { defaultValue: 123 }); myRep.on('change', (newValue, oldValue) =&gt; { console.log(`myRep changed from ${oldValue} to ${newValue}`); }); myRep.value = 'Hello!'; myRep.value = { objects: 'work too!' }; myRep.value = { objects: { can: { be: 'nested!' } } }; myRep.value = ['Even', 'arrays', 'work!'];  "},{"title":"sendMessage","type":0,"sectionRef":"#","url":"/docs/classes/sendMessage","content":"","keywords":""},{"title":"Returns​","type":1,"pageTitle":"sendMessage","url":"/docs/classes/sendMessage#returns","content":"Browser Only This can only be used in code which runs in Dashboards and Graphics. A Promise that is rejected if the first argument provided to the acknowledgement is an Error, otherwise it is resolved with the remaining arguments provided to the acknowledgement. "},{"title":"Parameters​","type":1,"pageTitle":"sendMessage","url":"/docs/classes/sendMessage#parameters","content":"Name\tType\tAttributes\tDescriptionname\tstring The name of the message. data\tmixed\t&lt;optional&gt;\tThe data to send. cb\tfunction\t&lt;optional&gt;\tBrowser only The error-first callback to handle the server's acknowledgement message, if any. "},{"title":"Example​","type":1,"pageTitle":"sendMessage","url":"/docs/classes/sendMessage#example","content":"Sending a normal message: nodecg.sendMessage('printMessage', 'dope.');  Sending a message and replying with an acknowledgement: // bundles/my-bundle/extension.js module.exports = function (nodecg) { nodecg.listenFor('multiplyByTwo', (value, ack) =&gt; { if (value === 4) { ack(new Error('I don\\'t like multiplying the number 4!')); return; } // acknowledgements should always be error-first callbacks. // If you do not wish to send an error, use a falsey value // like &quot;null&quot; instead. if (ack &amp;&amp; !ack.handled) { ack(null, value * 2); } }); } // bundles/my-bundle/graphics/script.js // Both of these examples are functionally identical. // Promise acknowledgement nodecg.sendMessage('multiplyByTwo', 2) .then(result =&gt; { console.log(result); // Will eventually print '4' }).catch(error =&gt; { console.error(error); }); // Error-first callback acknowledgement nodecg.sendMessage('multiplyByTwo', 2, (error, result) =&gt; { if (error) { console.error(error); return; } console.log(result); // Will eventually print '4' });  "},{"title":"sendMessageToBundle","type":0,"sectionRef":"#","url":"/docs/classes/sendMessageToBundle","content":"","keywords":""},{"title":"Returns​","type":1,"pageTitle":"sendMessageToBundle","url":"/docs/classes/sendMessageToBundle#returns","content":"Browser Only This can only be used in code which runs in Dashboards and Graphics. A Promise that is rejected if the first argument provided to the acknowledgement is an Error, otherwise it is resolved with the remaining arguments provided to the acknowledgement. But, if a callback was provided, this return value will be undefined, and there will be no Promise. "},{"title":"Parameters​","type":1,"pageTitle":"sendMessageToBundle","url":"/docs/classes/sendMessageToBundle#parameters","content":"Name\tType\tAttributes\tDescriptionname\tstring The name of the message. bundleName\tstring The name of the target bundle. data\tmixed\t&lt;optional&gt;\tThe data to send. cb\tfunction\t&lt;optional&gt;\tBrowser only The error-first callback to handle the server's acknowledgement message, if any. "},{"title":"stopAllSounds()","type":0,"sectionRef":"#","url":"/docs/classes/stopAllSounds","content":"stopAllSounds() Browser Only This can only be used in code which runs in Dashboards and Graphics. stopAllSounds() Stops all currently playing sounds on the page.","keywords":""},{"title":"socket","type":0,"sectionRef":"#","url":"/docs/classes/socket","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"socket","url":"/docs/classes/socket#example","content":"Listening for socket disconnect events: nodecg.socket.on(&quot;disconnect&quot;, () =&gt; { console.log(&quot;Socket disconnected!&quot;); });  "},{"title":"stopSound","type":0,"sectionRef":"#","url":"/docs/classes/stopSound","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"stopSound","url":"/docs/classes/stopSound#parameters","content":"Name\tType\tDescriptioncueName\tString\t "},{"title":"unlisten","type":0,"sectionRef":"#","url":"/docs/classes/unlisten","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"unlisten","url":"/docs/classes/unlisten#parameters","content":"Name\tType\tAttributes\tDefault\tDescriptionmessageName\tstring The name of the message. bundleName\tstring\t&lt;optional&gt;\tCURR_BNDL\tThe bundle namespace to in which to listen for this message handlerFunc\tfunction A reference to a handler function added as a listener to this message via listenFor. "},{"title":"Example​","type":1,"pageTitle":"unlisten","url":"/docs/classes/unlisten#example","content":"nodecg.unlisten('printMessage', someFunctionName);  Removing a listener from a message in another bundle's namespace: nodecg.unlisten('printMessage', 'another-bundle', someFunctionName);  "},{"title":"waitForReplicants","type":0,"sectionRef":"#","url":"/docs/classes/waitForReplicants","content":"","keywords":""},{"title":"Parameters​","type":1,"pageTitle":"waitForReplicants","url":"/docs/classes/waitForReplicants#parameters","content":"Name\tType\tDescriptionreplicants\tReplicant\t "},{"title":"Example​","type":1,"pageTitle":"waitForReplicants","url":"/docs/classes/waitForReplicants#example","content":"From a graphic or dashboard panel: const rep1 = nodecg.Replicant('rep1'); const rep2 = nodecg.Replicant('rep2'); // You can provide as many Replicant arguments as you want, // this example just uses two Replicants. NodeCG.waitForReplicants(rep1, rep2).then(() =&gt; { console.log('rep1 and rep2 are fully declared and ready to use!'); });  "},{"title":"Creating Bundles","type":0,"sectionRef":"#","url":"/docs/creating-bundles","content":"","keywords":""},{"title":"Examples​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles#examples","content":"Before continuing, you may find it helpful to look over our collection of simple example bundles. "},{"title":"Using Yeoman​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles#using-yeoman","content":"Use Yeoman and generator-nodecg to generate the beginnings of your new bundle: npm install --global yo generator-nodecg cd bundles mkdir my-first-bundle cd my-first-bundle yo nodecg Answer the prompts one-by-one as they come up. Once your template bundle has been generated, start NodeCG: cd ../.. nodecg start note When running NodeCG in production, Docker or pm2 are recommended. Open the NodeCG Dashboard, which will be located at http://localhost:9090 by default. You should see a page like this: That's it! You can click the &quot;Graphics&quot; button in the top right to see a list of graphics in your installed bundles. If you have more questions, want further guidance, or would just like to hang out with other NodeCG devs, join our Discord server! "},{"title":"Creating Bundles","type":0,"sectionRef":"#","url":"/docs/creating-bundles-dark","content":"","keywords":""},{"title":"Examples​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-dark#examples","content":"Before continuing, you may find it helpful to look over our collection of simple example bundles. "},{"title":"Using Yeoman​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-dark#using-yeoman","content":"Use Yeoman and generator-nodecg to generate the beginnings of your new bundle: npm install --global yo generator-nodecg cd bundles mkdir my-first-bundle cd my-first-bundle yo nodecg Answer the prompts one-by-one as they come up. Once your template bundle has been generated, start NodeCG: cd ../.. nodecg start note When running NodeCG in production, Docker or pm2 are recommended. Open the NodeCG Dashboard, which will be located at http://localhost:9090 by default. You should see a page like this: That's it! You can click the &quot;Graphics&quot; button in the top right to see a list of graphics in your installed bundles. If you have more questions, want further guidance, or would just like to hang out with other NodeCG devs, join our Discord server! "},{"title":"Concepts and Terminology","type":0,"sectionRef":"#","url":"/docs/concepts-and-terminology","content":"","keywords":""},{"title":"Manifest​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#manifest","content":"Every bundle needs a package.json manifest file in its root directory. In addition to the required fields like name and version, NodeCG bundles must also have a nodecg object in their package.json with some additional properties that tell NodeCG how to load your bundle. "},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#related-docs","content":"package.json Manifest "},{"title":"Graphics​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#graphics","content":"Graphics are the end result that your viewers will see. NodeCG itself doesn't provide any libraries for drawing pixels, it instead lets the user decide how they want to create their graphics in the open framework of HTML5, CSS3, and JS (with ES6 being fully supported). NodeCG will also helpfully inject an API instance into the global scope of your graphics, accessible as window.nodecg (or just nodecg) from your graphic's code. Graphics are defined in your bundle's package.json file, in the nodecg.graphics section, with a few simple properties: file, the relative path (from your bundle's root directory) to the HTML file to be served as a graphic. Your graphics should all live in the nodecg/your-bundle/graphics/ folder. width and height, which defines the dimensions of your graphic. Note that your graphic doesn't have to strictly adhere to these values, they're mostly for documentation of your bundle. NodeCG doesn't enforce these values. singleInstance, an optional property, that only allows your graphic to be open in one place at a time. This is useful in scenarios where your graphic has fragile or highly stateful logic.Ideally, you'd never need to use singleInstance. However, it is sometimes hard to avoid, and can be the fastest route to shipping a complex graphic. "},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#related-docs-1","content":"package.json ManifestUsing npmPerformance TipsScreenshot Testing "},{"title":"Dashboard​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#dashboard","content":"The dashboard is where all your controls for your graphics end up. Each panel is it's own self-contained webpage (displayed as an &lt;iframe&gt;), and has full access to the NodeCG API. Panels are defined in your bundle's package.json file in the nodecg.dashboardPanels section with a few properties: name, the internal name of your panel.title, the title displayed on the NodeCG workspace.file, the relative path (from your bundle's root directory) to the HTML file to be served as a dashboard panel.width, an optional property, the amount of space the bundle takes up on the page. Valid values are 1-8.Width scaling is arbitrary and is subject to change, play around with it. headerColor, an optional property, that will change the color of the panel's header to a provided hexadecimal color value. Your headerColor must start with a # character. For example: #f47425. workspace, an optional property, that when set will place the panel into a new workspace with the name provided. These workspaces can be shared between bundles.fullbleed, an optional property, that when set to true will place the panel in it's own workplace at the maximum possible width and height with no margins. Each fullbleed panel gets its own dedicated workspace. dialog, an optional property, that will turn the panel into a dialog that other panels are able to open.dialogButtons, an optional property, that will show buttons for confirm, dismiss, or both on the dialog. "},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#related-docs-2","content":"package.json ManifestMaking dialogsUsing npmSoundsAssets "},{"title":"Extensions​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#extensions","content":"Extensions are the back-end portion of your graphics and dashboard panels, typically handling all the potential messy logic that your bundle may need to handle, such as donations or schedule handling. NodeCG will try and require your bundle's extensions folder, so if used an index.js file is needed. Each extension must export a function that accepts a NodeCG API instance as its first and only argument. Not all bundles might require an extension to back them up, but you should consider one if your bundle might be handling any API work. Example: // nodecg/bundles/your-bundle/extension.js module.exports = nodecg =&gt; { nodecg.listenFor('foo', () =&gt; { console.log('bar'); }); };  NodeCG automatically attempts to load the following files as extensions: nodecg/bundles/your-bundle/extension.jsnodecg/bundles/your-bundle/extension/index.js Your bundle may have one of, but not both of the above files. If your extension is simple enough to fit in one file, use the former approach. If your extension is broken up into multiple files, you may want to use the latter structure and keep all those files in a single extension folder. If using an extension folder, NodeCG will only load your-bundle/extension/index.js. It is up to you to load any other files that your extension needs via require. "},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#related-docs-3","content":"Extensionspackage.json ManifestUsing npmCustom routesBundle configurationMounts "},{"title":"Messages​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#messages","content":"Messages are the way NodeCG lets extensions, dashboard panels, and the graphics communicate with each other seamlessly. A message can be anything, from an array to an object to a string, as long as it can be represented in Javascript, you can send it. All you have to do is call nodecg.sendMessage on one end and nodecg.listenFor on another! "},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#related-docs-4","content":"sendMessagesendMessageToBundlelistenFor "},{"title":"Replicants​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#replicants","content":"Replicants are how NodeCG stores and replicates data between extensions, dashboard panels, and graphics. Rather than being events like messages are, Replicants are (optionally) persistent. Replicants on server-side extensions are able to be read synchronously, as NodeCG has immediate access to the database of replicants, but in dashboard panels and graphics you should read Replicants asynchronously by listening for the change event. "},{"title":"Related Docs​","type":1,"pageTitle":"Concepts and Terminology","url":"/docs/concepts-and-terminology#related-docs-5","content":"ReplicantReplicant Validation "},{"title":"Custom Routes","type":0,"sectionRef":"#","url":"/docs/custom-routes","content":"Custom Routes NodeCG uses express for its routing, and exposes a helper for creating routes easily: // bundles/my-bundle/extension.js module.exports = function (nodecg) { const router = nodecg.Router(); router.get('/customroute', (req, res) =&gt; { res.send('OK!'); }); nodecg.mount('/my-bundle', router); // The route '/my-bundle/customroute` is now available }; ","keywords":""},{"title":"Creating Bundles","type":0,"sectionRef":"#","url":"/docs/creating-bundles-light","content":"","keywords":""},{"title":"Examples​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-light#examples","content":"Before continuing, you may find it helpful to look over our collection of simple example bundles. "},{"title":"Using Yeoman​","type":1,"pageTitle":"Creating Bundles","url":"/docs/creating-bundles-light#using-yeoman","content":"Use Yeoman and generator-nodecg to generate the beginnings of your new bundle: npm install --global yo generator-nodecg cd bundles mkdir my-first-bundle cd my-first-bundle yo nodecg Answer the prompts one-by-one as they come up. Once your template bundle has been generated, start NodeCG: cd ../.. nodecg start note When running NodeCG in production, Docker or pm2 are recommended. Open the NodeCG Dashboard, which will be located at http://localhost:9090 by default. You should see a page like this: That's it! You can click the &quot;Graphics&quot; button in the top right to see a list of graphics in your installed bundles. If you have more questions, want further guidance, or would just like to hang out with other NodeCG devs, join our Discord server! "},{"title":"TypeScript","type":0,"sectionRef":"#","url":"/docs/frameworks/typescript","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#setup","content":"Install TypeScript as your bundle's dev dependency. npm install -D typescript # or yarn add -D typescript  "},{"title":"Typing Replicants​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#typing-replicants","content":"Optionally, you can define types of replicants using replicants' JSON schema. Define schema for replicantsUse https://github.com/bcherny/json-schema-to-typescript to convert JSON schema to TypeScript type definitionsImport the type and pass it to type parameter like this: const rep = nodecg.Replicant&lt;SchemaTypeDef&gt;('schemaTypeDef')  "},{"title":"Using Type Definitions​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#using-type-definitions","content":"More examples are available in typetest directory, which is also used to test the type definitions. "},{"title":"extension​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#extension","content":"// Directly import the type definition file import {NodeCG} from '../../../../types/server' export = (nodecg: NodeCG) =&gt; { nodecg.sendMessage('message') }  "},{"title":"dashboard/graphics​","type":1,"pageTitle":"TypeScript","url":"/docs/frameworks/typescript#dashboardgraphics","content":"/// &lt;reference path=&quot;../../../../types/browser.d.ts&quot; /&gt; nodecg.listenFor('message', () =&gt; { // ... })  "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/docker","content":"Introduction Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is. Containerization is increasingly popular because containers are: Flexible: Even the most complex applications can be containerized.Lightweight: Containers leverage and share the host kernel.Interchangeable: You can deploy updates and upgrades on-the-fly.Portable: You can build locally, deploy to the cloud, and run anywhere.Scalable: You can increase and automatically distribute container replicas.Stackable: You can stack services vertically and on-the-fly. Source Get Started - docs.docker.com (It's highly recommend to read into it if you didn't already) Docker provides a lot of useful features for NodeCG: No need to care about dependencies. They are all bundled with the docker imageRun it everywhere.Easy upgrades. Prerequisites DockerDocker-Compose (1.13.0+) (optional) Bundle development If you want to use NodeCG in development, you can easily deploy a NodeCG instance with Docker. All you have to do is run: docker run -it -u root -p 9090:9090 -rm nodecg/nodecg note The argument -u root is needed to ensure that the NodeCG process runnning inside the container has the rights to read the mounted volumes. To include the bundle you're working on in this Docker Container. You can mount it like this: docker run -it -u root -p 9090:9090 -rm -v [bundle-dir]:/opt/nodecg/bundles/[bundle-name] -v [config-file]:/opt/nodecg/cfg/[bundle].json nodecg/nodecg Mounting the volumes and running as root will ensure that the changes are in the container, without a docker image rebuild. Production If you want to use NodeCG in production, it is recommended to build a own Docker Image to hold all your bundles and configuration. Example Dockerfile: FROM nodecg/nodecg:v1.9.0 USER root # Add commands to install global dependencies here, like Bower USER nodecg RUN nodecg install [bundle-repo] &amp;&amp; nodecg defaultconfig [bundle-name] &amp;&amp; \\ ... COPY --chown=nodecg:nodecg [nodecg-config-file] /opt/nodecg/cfg/nodecg.json Optional Tip You could add the configuration files to your image to avoid problems with the file permissions. (If you decide to do so, be careful with the secrets in these files as everyone who has access to the docker image has access to the secrets in the configuration files) COPY --chown=nodecg:nodecg [bundle-config-file] /opt/nodecg/cfg/[bundle].json Instead of the seperate COPY directives you could use only one: COPY --chown=nodecg:nodecg [config-dir]/* /opt/nodecg/cfg/ This will create only one layer. But requires you to organize all your configuration files in the same directory.More Information FROM nodecg/nodecg:v1.9.0 Defines the parent image that should be used to build your Docker Image. We use nodecg/nodecg with the latest version tag v1.5.0. The parent image already include NodeCG and nodecg-cli. # Add commands to install global dependencies here, like Bower If you use bundles that require Bower or any other external dependencies, install them here. It will make the next build faster if these external dependencies dont change. To install bower use RUN npm install -g bower. RUN nodecg install ... &amp;&amp; nodecg defaultconfig ... Installs your bundles and generates the default configs for them. (if you include the configuration later, you dont need to generate the default configuration) nodecg install (more information at nodecg-cli) To install a bundle from Github, enter the owner and repository name: nodecg install lange/lange-notify ... to install a bundle from Bitbucket, enter the owner and repository name prefixed with bitbucket: nodecg install bitbucket:username/repo-name ... to install a bundle from any other git provider, enter the git URL: nodecg install https://gitlab.com/username/repo-name.git COPY --chown=nodecg:nodecg [nodecg-config-file] /usr/src/app/cfg/nodecg.json Copies the config file from your filesystem into the Docker Image and can be accessed from the container. (--chown is needed because the NodeCG process is run by the user nodecg) Now use Docker to build your image from the Dockerfile you just created: docker build -v [configuration dir]:/opt/nodecg/cfg -t [your-image-name] . And run it with: docker run -p 9090:9090 [your-image-name] Or create a docker-compose.yml like this: version: '3' services: nodecg: image: '[your-image-name]' ports: - '9090:9090' volumes: - '[configuration dir]:/opt/nodecg/cfg' Be sure that your configuration dir is accessable by nodecg:nodecg (uid: 101, gid: 102) Build a new docker image for your deployment has the advantage, that it is safer (because it is run as a non-root user), more consistent (because the container wont keep changes, except your explicitly tell it to). To upgrade NodeCG just build a new image with the new parent. Replace FROM nodecg/nodecg:1.9.0 with FROM nodecg/nodecg:[newer version] danger If you want to host your NodeCG instance on the internet (instead of just on a secure LAN), it is highly recommended to encrypt and secure NodeCG. To encrypt the traffic, you can use a TLS/SSL termination proxy like: Traefik - Really neat if you host a lot of services in docker.Docker Flow Proxy - Similar to Traefik.Caddy - Be aware of the licensing of the binaries. It should be ok if you build it yourself e.g. in a Docker Image. No garantee.nginx-proxy w/ letsencrypt - Useful if you're already familiar with nginx or have existing site configurations you'd like to port over.Others - There are a lot of other solutions. Choose what fits you best. To secure NodeCG, follow the Security &amp; Authentication guide.","keywords":""},{"title":"Using p5.js","type":0,"sectionRef":"#","url":"/docs/frameworks/using-p5js","content":"Using p5.js p5.js is a library to make javascript more accessible to people. It can easily be implemented into NodeCG simply by including both the standard p5.js file and the p5.dom library in the shared folder as this folder is always mounted. p5.js can be used as normal and NodeCG calls are included when needed. An example bundle containing a counter and a lower third is located in the NodeCG simple examples repo.","keywords":""},{"title":"Using Vue.js","type":0,"sectionRef":"#","url":"/docs/frameworks/vue","content":"Using Vue.js caution Work in progress Example bundles: Vue and TypeScript template","keywords":""},{"title":"Bundlers & Developer Setup","type":0,"sectionRef":"#","url":"/docs/frameworks/using-bundlers","content":"","keywords":""},{"title":"Bundlers​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#bundlers","content":"Webpack, the most used bundler, has some good documentation for why to use Webpack. There are several JavaScript bundlers. webpack By far the most used bundler with a lot of community made extensions. rollup Primarily used by libraries like React, Vue - utilizes ES Modules for splitting code parcel Bundler famous for zero-config and super fast building process esbuild Extremely fast bundler written in Go, however currently the maintainers state that it is unstable for production usage.  These bundlers allows you to write modular, organised source codetreat CSS, images, or any sort of files like JavaScript moduleuse npm packages for front-end (dashboard/graphics)use JSX/TSX, Vue single file componentwrite in other languages like TypeScriptand many more "},{"title":"Tutorial: Using Parcel​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#tutorial-using-parcel","content":"caution The below tutorial focuses solely on bundler tooling with NodeCG and was last updated in November 2020; functionality may be limited due to updates in underlying tools, particularly Parcel. If you run into issues, feel free to put in a pull request. "},{"title":"Directory Structure​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#directory-structure","content":"Basically you will have parcel to output the whole dashboard and graphicsdirectory. Your project would look like this foo-layouts |- extension |- schemas |- src |- package.json  When you run parcel, it will make dashboard and graphics directory and output bundle result into them. (After running parcel) foo-layouts |- extension |- schemas |- src |- package.json |- dashboard (built) |- index.html |- styles.8jx17sx.css |- main.7x2hdjs.js |- graphics (built) |- ds1.html |- sd1.html |- styles.03nsh2s.css |- ds1.rssiahs.js |- sd1.4jc71nx.js |- background.d8frsis.png  The random string for each generated files are automatically generated to refresh cache when the files change. "},{"title":"Setup​","type":1,"pageTitle":"Bundlers & Developer Setup","url":"/docs/frameworks/using-bundlers#setup","content":"As I said, parcel is (literally) zero-configuration required. It even installs missing packages for you if there is any. Add parcel to your bundle​ Locally​ npm install --save-dev parcel-bundler # or yarn add -D parcel-bundler  The parcel command will be available locally. You can run it either adding npm scripts, or npx parcel/yarn parcel. Globally​ npm install -g parcel-bundler # or yarn global add parcel-bundler  With this, parcel command should be available globally. Just run parcel to run the bundler. Make an entrypoint​ When building front-end, HTML file is usually used as entrypoint. You can just use your HTML file with your scripts and stylesheets imported. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;./styles.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;tech&quot;&gt;&lt;/div&gt; &lt;!-- Or a lot of pre-defined elements --&gt; &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt;  The entrypoint HTML file will also be compiled in the bundler. So you can have many kind of files in the script tag. Parcel will automatically detect file format and use an appropriate library/compiler to bundle the file. &lt;script src=&quot;./main.coffee&quot;&gt;&lt;/script&gt;  &lt;script src=&quot;./app.tsx&quot;&gt;&lt;/script&gt;  Or the entrypoint doesn't even have to be an HTML file. For example, you can usePug to have common parts of HTML file into one file. doctype html html head title graphics-ds include lib/common.pug body div(id=&quot;ds&quot;) script(src=&quot;./views/ds.ts&quot;)  Run the command​ For development, with file change detection and hot-reloading: parcel watch src/dashboard/index.html --out-dir dashboard --public-url ./  For production build, with optimized output: parcel build src/dashboard/index.html --out-dir dashboard --public-url ./  (Replace src/dashboard/index.html with your entrypoint files.) You can use a glob pattern to use multiple entrypoints, if you have multiple pages to compile parcel build src/dashboard/*.html --out-dir dashboard --public-url ./  A detailed reference can be found in the Parcel CLI reference documentation. Recommended Configuration​ Even though it already works for most cases (!), a bit of configuration might be recommended/required. browserslist​ Parcel uses babel out of box, and the default supported browsers are &gt;0.25% which includes old browsers like IE. Considering how NodeCG is used, it's the best to target only modern browsers or just Chrome. To do so, add browserslist property to package.json. For example, { // ... &quot;browserslist&quot;: &quot;last 2 chrome versions&quot;, &quot;nodecg&quot;: //... }  Refer to this page for detailed browserslist syntax. Going further​ Due to the huge amount of features parcel offers out of box, at this point you already have a lot more options for your front-end development. For example: React development with JSX/TSXVue single file componentTypeScript or other alternative languages Also, if your project becomes too advanced for parcel to handle, you can switch to webpack - there are tools that can do this configuration conversion, to either Webpack or other tools like Vite, WMR, or Turbopack. "},{"title":"Installing NodeCG","type":0,"sectionRef":"#","url":"/docs/installing","content":"","keywords":""},{"title":"Install​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#install","content":"There are two methods to install NodeCG: cloning from GitHub or using the nodecg-cli. Install Node.js (version 8.3 or greater) &amp; npm (version 2 or greater). Using nodecg-cli: npm install --global nodecg-cli mkdir nodecg cd nodecg nodecg setup  Cloning from GitHub: git clone --depth 1 --branch legacy-1.x https://github.com/nodecg/nodecg.git cd nodecg npm install --production  caution Ensure to specify a branch when cloning, as the master branch is in an unstable state while v2.0 is being developed. "},{"title":"Start​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#start","content":"Run node index.js or nodecg start in the root nodecg folder. Open the dashboard (http://localhost:9090 by default). note When running NodeCG in production, Docker or pm2 are recommended. "},{"title":"Installing bundles​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#installing-bundles","content":"NodeCG's individual graphics packages are called bundles. They can be installed either from the command-line (via nodecg-cli), or by simply placing the folder into the ./bundles directory. The easiest way to install bundles is via the command-line using nodecg-cli. You will need to install nodecg-cli before you can use the nodecgterminal commands. "},{"title":"GitHub​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#github","content":"nodecg install lange/lange-notify  "},{"title":"BitBucket​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#bitbucket","content":"nodecg install bitbucket:username/repo-name  "},{"title":"Other Providers​","type":1,"pageTitle":"Installing NodeCG","url":"/docs/installing#other-providers","content":"Enter the git URL. nodecg install https://gitlab.com/username/repo-name.git  Bundles are just directories inside the ./bundles folder. They can always be added and removed by simply moving them into or out of that folder. Avoid installing or uninstalling bundles while NodeCG is running. "},{"title":"Making Dashboard Dialogs","type":0,"sectionRef":"#","url":"/docs/making-dialogs","content":"","keywords":""},{"title":"Opening dialogs​","type":1,"pageTitle":"Making Dashboard Dialogs","url":"/docs/making-dialogs#opening-dialogs","content":"To open a dialog, add a nodecg-dialog attribute to any clickable element on one of your panels. For example, this&lt;paper-button&gt; element will open the edit-total dialog when clicked: &lt;paper-button id=&quot;edit&quot; class=&quot;nodecg-configure&quot; nodecg-dialog=&quot;edit-total&quot;&gt;Edit...&lt;/paper-button&gt;  When a dialog is opened, NodeCG will emit a dialog-opened event on your dialog's document. For example: &lt;!-- bundles/my-bundle/dashboard/my-dialog.html --&gt; &lt;script&gt; document.addEventListener('dialog-opened', function() { // The user opened the dialog. }); &lt;/script&gt;  "},{"title":"Closing dialogs​","type":1,"pageTitle":"Making Dashboard Dialogs","url":"/docs/making-dialogs#closing-dialogs","content":"By default, a dialog can only be closed by clicking outside of it. Optional confirmation and dismissal buttons can be added via package.json. See the package.json tutorial for information on the dialogButtonsproperty. When a confirm or dismiss button is pressed, NodeCG will emit a dialog-confirmed or dialog-dismissed event on your dialog's document. For example: &lt;!-- bundles/my-bundle/dashboard/my-dialog.html --&gt; &lt;script&gt; document.addEventListener('dialog-confirmed', function() { // The user pressed the confirm button. }); document.addEventListener('dialog-dismissed', function() { // The user pressed the dismiss button. }); &lt;/script&gt;  "},{"title":"package.json Manifest","type":0,"sectionRef":"#","url":"/docs/manifest","content":"","keywords":""},{"title":"nodecg.compatibleRange​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#nodecgcompatiblerange","content":"A semver range that defines which version(s) of NodeCG this bundle is compatible with. This bundle will not load in NodeCG versions outside the specified range. This field is required. "},{"title":"nodecg.bundleDependencies​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#nodecgbundledependencies","content":"Formatted identically to npm's dependencies field, but behaves differently. Bundles declared as bundleDependencies are not automatically installed. This field's only job is to ensure that dependant bundles are loaded first. In the above example, other-bundle would be loaded before example-bundle, and if other-bundle fails to load then so will example-bundle. This field is only required if your bundle makes use of the nodecg.extensions API. "},{"title":"nodecg.dashboardPanels​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#nodecgdashboardpanels","content":"An array of objects, each object describing an individual dashboard panel or dialog. Every panel and dialog must have a name, title, and file. file is relative to the bundle's dashboard folder.width is optional, and defaults to 2. The width scale is arbitrary and may change, so you'll want to play around with this number to get the desired width. Panels also have an optional headerColor property that accepts a hex color string. You can split your panels up into multiple workspaces. By default all panels are added to the same workspace. If you'd like to specify a different workspace, simply provide a workspace name as the workspace property. Workspaces work across bundles. If my-bundle and your-bundle both declare a panel in the Shared Workspaceworkspace, then both of our panels will show up together. If you have a really big panel that simply needs to be in its own workspace and have maximized screenspace, give it the fullbleed property. Fullbleed panels are put into their own workspace and have no margins around them. This is good for when you have a large, complex UI that you need more fine-grained control over.  To mark a panel as a dialog, it must have the dialog property set to true. Dialogs don't immediately display on the dashboard, and must be manually invoked. See Making Dashboard Dialogs for more info. (Screenshot of an open dialog) Dialogs have special buttons for confirmation and dismissal, which are defined in the dialogButtons property. There are only two types of dialogButton: confirm and dismiss. When one of these buttons is pressed, adialog-confirmed or dialog-dismissed event is emitted on the dialog's document to allow for easy handling with less boilerplate. This field is only required if your bundle has dashboard panels. "},{"title":"nodecg.graphics​","type":1,"pageTitle":"package.json Manifest","url":"/docs/manifest#nodecggraphics","content":"An array of objects, each object describing a graphic. Each graphic must have a file, width, and height. file is relative to the bundle's graphics folder. If you wish to enforce that your graphic only ever be open in one place at a time, set singleInstance to true(defaults to false). This field is only required if your bundle has graphics. "},{"title":"Migrating from 0.8 to 0.9","type":0,"sectionRef":"#","url":"/docs/migrating/migrating-0.8-to-0.9","content":"","keywords":""},{"title":"Breaking Changes​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#breaking-changes","content":"Dashboard Panel, Graphics, and Bower Components routes have changedMost default styles and classes injected into Panels have been removedErrors sent to sendMessage acknowledgements (callbacks) will be properly serializednpm and bower dependencies are no longer automatically installedRemoved Rollbar integration, replaced it with Sentry "},{"title":"Routing Changes​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#routing-changes","content":"NodeCG's routing has always been a little arbitrary and confusing. It did not match the structure of the filesystem, and there wasn't really a good reason for this. This arbitrary routing structure was hard to remember and prevented bundle authors from taking advantage of their IDE's autocomplete functionality. It also made using filesystem-aware tools like the polymer-bundler (formerly called vulcanize) needlessly difficult. The new routing structure matches the structure of the filesystem, making routes easier to work with and avoiding certain bugs relating to the de-duplication of HTML Imports (and soon, ES Modules). Old (don't use these anymore!): /panels/my-bundle/panel.html /graphics/my-bundle/graphic.html # Two different routes to the same file! This breaks the de-duplication of HTML Imports and causes errors. /panels/my-bundle/components/polymer/polymer.html /graphics/my-bundle/components/polymer/polymer.html  New: /bundles/my-bundle/dashboard/panel.html /bundles/my-bundle/graphics/graphic.html # Now, there is only one single route to any given file. /bundles/my-bundle/bower_components/polymer/polymer.html  "},{"title":"Removed Default Styles​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#removed-default-styles","content":"Up until now, NodeCG has injected some default styles and helper classes into each and every panel. The idea was to provide a set of base styles that every bundle author could use to try to create a cohesive NodeCG panel design across all bundles. However, this set of styles was far too small and limited to achieve that, and upon further reflection we decided that NodeCG core was not the place to attempt to accomplish this. Additionally, it's possible for these injected styles to cause frustrating conflicts. NodeCG does still inject a few default styles, but the number of styles has been dramatically reduced to just a few necessary things, such as the background color for panels. And, as always, this value can be easily overridden in your panel's CSS. If your panels relied on any of these default styles or helper classes such as nodecg-configure, you will need to manually specify new styles instead. "},{"title":"sendMessage acknowledgement Errors​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#sendmessage-acknowledgement-errors","content":"In the past, if you tried to reply to a sendMessage with an Error, you'd end up with just an empty Object at the other end ({}). This is because by default, JavaScript Errors are serialized as an empty Object by JSON.stringify. Now, if the first argument to a sendMessage acknowledgement is an error, it will be properly serialized and sent across the wire. As part of this, we are now strongly encouraging that all sendMessage acknowledgements always be treated as standard error-first Node.js-style callbacks. In addition, client-side sendMessage now also returns a Promise, so that you may use .then/.catch instead of a callback function. See the updated sendMessage documentation for more information. Please note that if you do not specify a callback to your sendMessage, then it will always return a Promise. Additionally, the first argument sent back in your acknowledgement is always assumed to be either an Error or null. If this value is truthy, then it will be used to reject the Promise. For this reason, it is strongly encouraged that all sendMessage acknowledgements strictly adhere to the error-first style of callbacks. "},{"title":"No Auto-Installation of Dependencies​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#no-auto-installation-of-dependencies","content":"Since the earliest versions of NodeCG, it has attempted to be helpful by automatically running both npm install --production and bower install on every installed bundle, every time you started up NodeCG. While some users may have found this helpful, over time we've come to realize that this was a misguided decision, and that installation of each bundle's dependencies should really be left to the user. The main rationale for the removal of this feature is that there's a lot more package managers out there than just npm and bower, and it's not reasonable for NodeCG to know about every single one of them and to be able to properly invoke them. The auto-dependency installation system made a lot of assumptions, and it's going to become more and more frequent that these assumptions just aren't valid. For example, if a bundle doesn't have a bower.json, then running bower install on it would actually have unintended side-effects. This is just one example that is easy to fix on its own, but there are many such examples of odd side-effects and unintended consequences of this automatic installation behavior. Together, they paint a clear picture that this feature was misguided, and should be removed. Going forward, users will always need to manually run whatever dependency installation steps are required by the bundle in question. For most bundles, this still means just running npm install --production &amp;&amp; bower install, but this will not always be the case. Each bundle will need to add their dependency installation steps to their READMEs, and make sure that users are educated in the fact that pulling down new updates to a bundle means that they may need to also install updated dependencies. "},{"title":"Removed Rollbar integration, replaced it with Sentry​","type":1,"pageTitle":"Migrating from 0.8 to 0.9","url":"/docs/migrating/migrating-0.8-to-0.9#removed-rollbar-integration-replaced-it-with-sentry","content":"In NodeCG v0.8, we introduced a first-class integration with the Rollbar error tracking service. This was very helpful and made NodeCG safer to use in production, but we were unhappy with the level of service and features that Rollbar provided. In NodeCG v0.9, we have removed the Rollbar integration and replaced it with a Sentry integration. See the Sentry tutorial for more info on how to set up Sentry in your NodeCG deployment. "},{"title":"Migrating from 0.7 to 0.8","type":0,"sectionRef":"#","url":"/docs/migrating/migrating-0.7-to-0.8","content":"","keywords":""},{"title":"Breaking Changes​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#breaking-changes","content":"The order of arguments to the Replicant change event handler has been swappedDashboard panels are now served from /panel/:bundleName/:panelFile routesUploads have been renamed to Assets, now have Categories "},{"title":"Replicant Change Event​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#replicant-change-event","content":"Prior to NodeCG v0.8, the Replicant change handler had the following signature: // NodeCG v0.7 and earlier myRep.on('change', function (oldVal, newVal, changes) {});  In v0.8, newVal and oldVal have been swapped, as newVal is frequently used whereas oldVal is less frequently used. // NodeCG v0.8 and later myRep.on('change', function(newVal, oldVal, operations) {});  "},{"title":"Panel Routes​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#panel-routes","content":"Dashboard panels are now served from /panel/:bundleName/:panelFile routes. Prior to v0.8, they were served from the/panel/:bundleName/:panelName route. This means that for a panel with the following declaration: { &quot;name&quot;: &quot;test&quot;, &quot;title&quot;: &quot;Test Panel&quot;, &quot;width&quot;: 2, &quot;file&quot;: &quot;panel.html&quot; }  ... the route to access this panel is now /panel/test-bundle/panel.html instead of /panel/test-bundle/test. This also affects panels served from subfolders. Previously, the following panel: { &quot;name&quot;: &quot;test-dialog&quot;, &quot;title&quot;: &quot;Test Dialog&quot;, &quot;width&quot;: 2, &quot;file&quot;: &quot;dialogs/test-dialog.html&quot; }  ... would have been served from /panel/test-bundle/test-dialog. It is now served from /panel/test-bundle/dialogs/test-dialog.html. If your panel or dialog is in a subfolder, you will need to update any relative links in your panel's HTML, CSS, and JS accordingly. For example, if test-dialog were importing &lt;paper-button&gt;, the URL it uses would have to change: &lt;!-- Won't work anymore. --&gt; &lt;link rel=&quot;import&quot; href=&quot;components/paper-button/paper-button.html&quot; /&gt; &lt;!-- Works with the new panel routes. --&gt; &lt;link rel=&quot;import&quot; href=&quot;../components/paper-button/paper-button.html&quot; /&gt;  "},{"title":"Assets & Asset Categories​","type":1,"pageTitle":"Migrating from 0.7 to 0.8","url":"/docs/migrating/migrating-0.7-to-0.8#assets--asset-categories","content":"NodeCG v0.7.2 introduced the Uploads system. NodeCG v0.8 has renamed this system to &quot;Assets&quot;, and introduces the concept of categories. See the [Assets tutorial]tutorial assets for more information on how to configure Assets for your bundle. "},{"title":"Mount folders as endpoints","type":0,"sectionRef":"#","url":"/docs/mounts","content":"Mount folders as endpoints As of v0.9.9, NodeCG supports a nodecg.mount array in your bundle's package.json. These mount declarations are simple objects with two keys: directory and endpoint. directory is a relative path from the root of your bundle which tells NodeCG which folder you'd like to mount as a custom endpoint. endpoint is a URL relative to http://localhost:9090/bundles/${bundle.name}/ which tells NodeCG what URL you'd like to serve your directory from (Of course, substitute localhost and 9090 with whatever host and port your NodeCG instance is configured to use). { &quot;name&quot;: &quot;test-bundle&quot;, &quot;nodecg&quot;: { &quot;mount&quot;: [ { &quot;directory&quot;: &quot;custom-dir&quot;, &quot;endpoint&quot;: &quot;my-mount-endpoint&quot; } ] } } The above example will make the contents of nodecg/bundles/test-bundle/custom-dir accessible via http://localhost:9090/bundles/test-bundle/my-mount-endpoint. These endpoints behave similarly to how Express' static method serves static files from folders. For example, if custom-dir contains a file called hello-world.html, that file can be accessed via the URL http://localhost:9090/bundles/test-bundle/my-mount-endpoint/hello-world.html.","keywords":""},{"title":"Migrating from 0.9 to 1.0","type":0,"sectionRef":"#","url":"/docs/migrating/migrating-0.9-to-1.0","content":"","keywords":""},{"title":"Breaking Changes​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#breaking-changes","content":"dashboard: The undocumented [dialog-confirm] and [dialog-dismiss] attribute click handlers have been removed.dashboard: The undocumented (and broken) panelClick event has been removed.sounds: The undocumented customCues system has been removed.api: A given context (server, client) can now declare multiple listenFor handlers for a given message. Handlers are called in the order they were registered.api: sendMessage can now trigger listenFor handlers in the same context (extension, webpage, etc).login: Twitch auth now uses the &quot;New Twitch API&quot;, instead of the deprecated &quot;v5&quot; API. "},{"title":"Undocumented [dialog-confirm] and [dialog-dismiss] attribute click handlers have been removed​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#undocumented-dialog-confirm-and-dialog-dismiss-attribute-click-handlers-have-been-removed","content":"Previously, NodeCG had an undocumented feature where any element in a Dialog with a [dialog-confirm] or [dialog-dismiss] attribute would close the panel (with an appropriate confirmed or dismissed event) when clicked. This undocumented feature has been removed. If your bundle relied on it, you will need to re-implement similar functionality in your bundle's code. "},{"title":"Undocumented (and broken) panelClick event has been removed​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#undocumented-and-broken-panelclick-event-has-been-removed","content":"Previously, NodeCG had an undocumented feature where any click event on any panel (or dialog) would emit a panelClick event on that panel's document. This undocumented feature has been removed, and never really worked properly to begin with. If your bundle relied on it, you will need to re-implement similar functionality in your bundle's code. "},{"title":"Undocumented customCues system has been removed​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#undocumented-customcues-system-has-been-removed","content":"Previously, NodeCG had an undocumented and extremely complex feature for defining and editing Sound Cues during runtime. This undocumented feature has been removed. If your bundle relied on it, you will need to re-implement similar functionality in your bundle's code. "},{"title":"Multiple listenFor handlers for a given message​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#multiple-listenfor-handlers-for-a-given-message","content":"Previously, NodeCG only allowed your bundle to specify one listenFor handler, per message, per context. Now, NodeCG lets you define as many listenFor handlers as you want, for any message, in any location. However, server-side listenFor handlers must be careful to not call an acknowledgement more than once: // nodecg/bundles/your-bundle module.exports = function(nodecg) { nodecg.listenFor('example', (data, ack) =&gt; { if (ack &amp;&amp; !ack.handled) { ack('foo'); } }); };  &lt;!-- nodecg/bundles/your-bundle/graphics/example.html --&gt; &lt;script&gt; nodecg.sendMessage('example', 'hello', (error, response) =&gt; { console.log(response); // =&gt; Will log &quot;foo&quot;. }); &lt;/script&gt;  Calling an acknowledgement more than once will throw an error. In short: most bundles won't need to change any of their code to be compatible with this change, but you should give everything a once-over to make sure things aren't behaving unexpectedly due to this new behavior. "},{"title":"sendMessage can now trigger listenFor handlers in the same context​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#sendmessage-can-now-trigger-listenfor-handlers-in-the-same-context","content":"Previously, NodeCG messages were inter-context only. That meant that they were only sent out over the network, and were not sent to other listeners in the same process context (extension, graphic, panel, etc). Now, NodeCG sends messages to every listener, regardless of location. This means that code like the following will now work as expected: // nodecg/bundles/your-bundle/extension.js module.exports = function(nodecg) { nodecg.sendMessage('hello', 'Hi there!'); };  // nodecg/bundles/my-bundle/extension.js module.exports = function(nodecg) { nodecg.listenFor('hello', 'your-bundle', data =&gt; { console.log(data); // =&gt; Will print &quot;Hi there!&quot; }); };  A side-effect of this change is that it is no longer guaranteed that a server-side listenFor handler will receive an acknowledgement callback as its second argument. You should always check for the presence of an acknowledgement before attempting to call it: // nodecg/bundles/your-bundle module.exports = function(nodecg) { nodecg.listenFor('example', (data, ack) =&gt; { if (ack &amp;&amp; !ack.handled) { ack('foo'); } }); };  "},{"title":"Twitch auth now uses the \"New Twitch API\", instead of the deprecated \"v5\" API​","type":1,"pageTitle":"Migrating from 0.9 to 1.0","url":"/docs/migrating/migrating-0.9-to-1.0#twitch-auth-now-uses-the-new-twitch-api-instead-of-the-deprecated-v5-api","content":"Previously, NodeCG used the deprecated &quot;v5&quot; Twitch API. Now, NodeCG uses the &quot;New Twitch API&quot;. The only tangible result of this change for NodeCG is that the format of the login.twitch.scope config parameter has changed. Please see https://dev.twitch.tv/docs/authentication/#scopes for documentation on this new format. "},{"title":"Performance Tips","type":0,"sectionRef":"#","url":"/docs/performance-tips","content":"","keywords":""},{"title":"Be careful which CSS properties you animate​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#be-careful-which-css-properties-you-animate","content":"Many CSS properties trigger layout events when changed. That means that changing one property can sometimes cause the entire page to be re-rendered, which imposes a significant performance hit. CSS Triggers is a website that lets you quickly check which CSS properties are expensive to animate. (Spoilers: transform and opacity are just about the only CSS properties that can be freely maniuplated with little overhead). "},{"title":"Minimize active <video> tags​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#minimize-active-video-tags","content":"For animations that are always the same, pre-rendering them as webm video (which supports alpha transparency) is an option. However, care must be taken to remove these &lt;video&gt; nodes from the DOM when they are not in use. Even if a &lt;video&gt; tag is not currently playing, simply having it in the DOM can impact performance. "},{"title":"Use sprite sheets when appropriate​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#use-sprite-sheets-when-appropriate","content":"For short pre-rendered animations, a sprite sheet might be the best solution. If done right, they can be smaller in size and perform better than their &lt;video&gt; counterpart. There are many libraries and tools out there for sprite sheet creation, butEaselJS (javascript Canvas2D library) andTexturePacker (sprite sheet creation program) are a good place to start. "},{"title":"A <div> is (generally) faster than a picture or video​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#a-div-is-generally-faster-than-a-picture-or-video","content":"Videos and sprite sheets can be nice shortcuts to speed up production time, but if your graphic is struggling to maintain a solid framerate then you may need to consider breaking it down into smaller parts. A handful of &lt;div&gt;s will generally perform better than a video or sprite sheet, as long as you aren't applying too many performance-intensive CSS styles. Use CSS Triggers as a reference to know how expensive it is to animate various CSS properties. "},{"title":"Minimize alpha pixels​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#minimize-alpha-pixels","content":"Alpha (transparency) is expensive to render. Try to keep your images and videos with alpha cropped as much as possible. "},{"title":"Avoid multiple CSS masks​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#avoid-multiple-css-masks","content":"CSS masks have their uses, but layering multiple masks in a scene can lead to significant performance reductions. When possible, use a culling div with overflow: hidden instead. "},{"title":"Compress your images​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#compress-your-images","content":"Compressed images won't help framerate, but they will improve load times. Compressing your PNGs with a service such as TinyPNG can result in dramatically reduced filesizes. Be careful when compressing images with subtle gradients, as some detail may be lost. "},{"title":"Keep <canvas> tags above 256x257 total pixels​","type":1,"pageTitle":"Performance Tips","url":"/docs/performance-tips#keep-canvas-tags-above-256x257-total-pixels","content":"In Chrome, &lt;canvas&gt; tags are only hardware accelerated when their total size is at least 256x257 pixels. Below this size, canvases are software rasterized and can severely reduce the framerate and performance of a graphic. Sources:12 "},{"title":"Portable NodeCG","type":0,"sectionRef":"#","url":"/docs/portable-nodecg","content":"Portable NodeCG By bundling the main Node.js executable (node.exe) with a NodeCG instance, NodeCG can run from any folder without requiring an installation process. To start, your NodeCG instance must be fully installed and configured. This means that all dependencies for both NodeCG and all bundles should be installed. Run the instance once and make sure everything works before continuing.Once you have verified that the instance works and that all dependencies are installed, copy node.exe from your Node.js installation into the root of your NodeCG instance.In the same directory, create a batch file or shell script with the following content: node index.js Double-click that batch file/shell script to run NodeCG. With the above procedure, it is possibly to fully configure a NodeCG instance and put it on a USB stick that can be run on any PC. This is good for preparing for broadcasts ahead of time where the broadcast PC might not have Node.js, git, and a compiler chain installed.","keywords":""},{"title":"NodeCG Configuration","type":0,"sectionRef":"#","url":"/docs/nodecg-configuration","content":"","keywords":""},{"title":"Schema​","type":1,"pageTitle":"NodeCG Configuration","url":"/docs/nodecg-configuration#schema","content":"host String The IP address or hostname that NodeCG should bind to.port Integer The port that NodeCG should listen on.baseURL String The URL of this instance. Used for things like cookies. Defaults to HOST:PORT. If you use a reverse proxy, you\\'ll likely need to set this value.developer Boolean Whether to enable features that speed up development. Not suitable for production.exitOnUncaught Boolean Whether or not to exit on uncaught exceptions.logging Object Contains other configuration properties. replicants Boolean Whether to enable logging of the Replicants subsystem. Very spammy.console Object Contains properties for console logging. enabled Boolean Whether to enable console logging.timestamps Boolean Whether to add timestamps to the console logging.level String Lowest importance of messages which should be logged. Must be &quot;trace&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot; or &quot;error&quot; file Object Contains properties for file logging. enabled Boolean Whether to enable file logging.timestamps Boolean Whether to add timestamps to the file logging.path String The filepath to log to.level String Lowest importance of messages which should be logged. Must be &quot;trace&quot;, &quot;debug&quot;, &quot;info&quot;, &quot;warn&quot; or &quot;error&quot; bundles Object Contains configuration for bundles. enabled Array of strings A whitelist array of bundle names that will be the only ones loaded at startup. Cannot be used with bundles.disabled.disabled Array of strings A blacklist array of bundle names that will not be loaded at startup. Cannot be used with bundles.enabled.paths Array of strings An array of additional paths where bundles are located. login Object Contains other configuration properties. enabled Boolean Whether to enable login security.sessionSecret String The secret used to salt sessions.forceHttpsReturn Boolean orces Steam &amp; Twitch login return URLs to use HTTPS instead of HTTP. Useful in reverse proxy setups.local Object Contains local username &amp; password login configuration properties. enabled Boolean Whether to enable Local authentication.allowedUsers Array of objects Which usernames and passwords to allow. Example: {&quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;foo123&quot;} steam Object Contains steam login configuration properties. enabled Boolean Whether to enable Steam authentication.apiKey String A Steam API Key. Obtained from http://steamcommunity.com/dev/apikeyallowedIds Array of strings Which 64 bit Steam IDs to allow. Can be obtained from https://steamid.io/ twitch Object Contains twitch login configuration properties. enabled Boolean Whether to enable Twitch authentication.clientID String A Twitch application ClientID http://twitch.tv/kraken/oauth2/clients/newclientSecret String A Twitch application ClientSecret http://twitch.tv/kraken/oauth2/clients/newNote: Configure your Twitch OAuth credentials with a Redirect URI to {baseURL}/login/auth/twitchscope String A space-separated string of Twitch application permissions.allowedUsernames Array of strings Which Twitch usernames to allow.allowedIds Array of strings Which Twitch IDs to allow. Can be obtained from https://twitchinsights.net/checkuser discord Object Contains discord login configuration properties. enabled Boolean Whether to enable Discord authentication.clientID String A Discord application ClientID https://discord.com/developers/applications/clientSecret String A Discord application ClientSecret https://discord.com/developers/applications/Note: Configure your Discord OAuth credentials with a Redirect URI to {baseURL}/login/auth/discordscope String A space-separated string of Discord application permissions.allowedUserIDs Array of strings Which Discord IDs to allowallowedGuilds Array of objects Which servers to allow users fromFormat for allowedGuilds objects guildID String Users in this Discord Server are allowed to log inallowedRoleIDs Array of strings Additionally require one of the roles on the server to log inguildBotToken String Discord bot token, needed if allowedRoleIDs is used https://discord.com/developers/applications/ ssl Object Contains HTTPS/SSL configuration properties. enabled Boolean Whether to enable SSL/HTTPS encryption.allowHTTP Boolean Whether to allow insecure HTTP connections while SSL is active.keyPath String The path to an SSL key file.certificatePath String The path to an SSL certificate file.passphrase String The passphrase for the provided key file. sentry Object Contains Sentry configuration properties. - enabled Boolean Whether to enable Sentry error reporting. - dsn String Your private DSN, for server-side error reporting. - publicDsn String Your public sentry DSN, for browser error reporting. "},{"title":"Example Config​","type":1,"pageTitle":"NodeCG Configuration","url":"/docs/nodecg-configuration#example-config","content":"{ &quot;host&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 9090, &quot;developer&quot;: false, &quot;bundles&quot;: { &quot;enabled&quot;: [&quot;bundle-name&quot;], &quot;paths&quot;: [&quot;C:\\\\nodecg\\\\experimental-bundles&quot;] }, &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;supersecret&quot;, &quot;steam&quot;: { &quot;enabled&quot;: true, &quot;apiKey&quot;: &quot;YYYYY&quot;, &quot;allowedIds&quot;: [&quot;11111111111111111&quot;, &quot;22222222222222222&quot;] }, &quot;twitch&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;your_app_id&quot;, &quot;clientSecret&quot;: &quot;your_app_key&quot;, &quot;scope&quot;: &quot;user_read&quot;, &quot;allowedUsernames&quot;: [&quot;some_username&quot;], &quot;allowedIds&quot;: [&quot;11111111111111111&quot;, &quot;22222222222222222&quot;] }, &quot;discord&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;your_discord_app_client_id&quot;, &quot;clientSecret&quot;: &quot;your_discord_app_client_secret&quot;, &quot;scope&quot;: &quot;identify guilds&quot;, &quot;allowedUserIDs&quot;: [ &quot;159600065017675778&quot;, &quot;54561421005950976&quot; ], &quot;allowedGuilds&quot;: [ { &quot;guildID&quot;: &quot;754749209722486814&quot;, &quot;allowedRoleIDs&quot;: [ &quot;754751725457637546&quot;, &quot;755012946400378910&quot; ], &quot;guildBotToken&quot;: &quot;your_bot_token&quot; }, { &quot;guildID&quot;: &quot;754749209722486814&quot; } ] }, &quot;logging&quot;: { &quot;replicants&quot;: false, &quot;console&quot;: { &quot;enabled&quot;: true, &quot;timestamps&quot;: false, &quot;level&quot;: &quot;trace&quot; }, &quot;file&quot;: { &quot;enabled&quot;: true, &quot;timestamps&quot;: true, &quot;path&quot;: &quot;logs/server.log&quot;, &quot;level&quot;: &quot;info&quot; } }, &quot;ssl&quot;: { &quot;enabled&quot;: false, &quot;keyPath&quot;: &quot;&quot;, &quot;certificatePath&quot;: &quot;&quot; }, &quot;sentry&quot;: { &quot;enabled&quot;: true, &quot;dsn&quot;: &quot;https://xxx:yyy@sentry.io/zzz&quot;, &quot;publicDsn&quot;: &quot;https://xxx@sentry.io/zzz&quot; } }  "},{"title":"Running NodeCG","type":0,"sectionRef":"#","url":"/docs/running-nodecg","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"Running NodeCG","url":"/docs/running-nodecg#usage","content":"Install a bundle to the bundles folder.Start NodeCG (node index.js or nodecg start if you have nodecg-cli installed).Open the dashboard (http://localhost:9090 by default).Open a graphic from the &quot;Graphics&quot; menu.You can configure NodeCG by creating and editing cfg/nodecg.json. When running NodeCG in production, Docker or pm2 are recommended. "},{"title":"Configuration​","type":1,"pageTitle":"Running NodeCG","url":"/docs/running-nodecg#configuration","content":"./cfg/nodecg.json is an optional file that you can create to configure NodeCG. See the NodeCG Configuration tutorial for more information on configuring NodeCG. "},{"title":"Screenshot Testing Graphics","type":0,"sectionRef":"#","url":"/docs/screenshot-testing","content":"Screenshot Testing Graphics Screenshot testing can be accomplished through the use of the nodecg-screenshot-tester library. See its documentation for more details on how to get started.","keywords":""},{"title":"Replicant Validation","type":0,"sectionRef":"#","url":"/docs/replicant-schemas","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Replicant Validation","url":"/docs/replicant-schemas#example","content":"nodecg/bundles/my-bundle/schemas/foo.json { &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;, &quot;type&quot;: &quot;object&quot;, &quot;additionalProperties&quot;: false, &quot;properties&quot;: { &quot;bar&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;The value of bar, which is a String.&quot;, &quot;default&quot;: &quot;hello world&quot; }, &quot;baz&quot;: { &quot;type&quot;: &quot;number&quot;, &quot;description&quot;: &quot;The value of baz, which is a Number.&quot;, &quot;default&quot;: 0 } }, &quot;required&quot;: [&quot;bar&quot;, &quot;baz&quot;] }  nodecg/bundles/my-bundle/extension.js module.exports = function (nodecg) { // We don't need to specify a `defaultValue` here, it will be automatically generated from the defaults // in the schema. const foo = nodecg.Replicant('foo'); /* You can override this by specifying your own `defaultValue` when declaring the Replicant. const foo = nodecg.Replicant('foo', { defaultValue: { bar: &quot;hi&quot;, baz: 5 } }); */ console.log(foo.value.bar); //=&gt; &quot;hello world&quot; console.log(foo.value.baz); //=&gt; 0 foo.value.bar = &quot;greetings planet&quot;; // Valid change, no error will be thrown. foo.value.baz = &quot;this should be a number!&quot;; // Invalid change, an error will be thrown. };  "},{"title":"Error Reporting with Sentry.io","type":0,"sectionRef":"#","url":"/docs/sentry","content":"Error Reporting with Sentry.io NodeCG v0.9 adds support for Sentry.io, a service for tracking errors. Sentry is especially useful for developers whom manage multiple NodeCG instances and need to be informed of both server-side and client-side errors as they happen. To add Sentry to your NodeCG instance, you'll first need to create a Sentry account and a Sentry project. Then, add the following to your instance's cfg/nodecg.json: { &quot;sentry&quot;: { &quot;enabled&quot;: true, &quot;dsn&quot;: &quot;your project's DSN, used to report server-side errors&quot;, &quot;publicDsn&quot;: &quot;your project's public DSN, used to report client-side errors&quot; } } Once Sentry is configured, any uncaught exceptions or unhandled promise rejections either on the server or on the client will be reported automatically. In addition, any use of nodecg.log.error will also be reported to Sentry.","keywords":""},{"title":"Sounds","type":0,"sectionRef":"#","url":"/docs/sounds","content":"Sounds NodeCG features a system for management and playback of sound cues. To add sound cues to your bundle, create a nodecg.soundCues array in your package.json: { &quot;name&quot;: &quot;test-bundle&quot;, &quot;nodecg&quot;: { &quot;soundCues&quot;: [ { &quot;name&quot;: &quot;name-only&quot; }, { &quot;name&quot;: &quot;default-volume&quot;, &quot;defaultVolume&quot;: 80 }, { &quot;name&quot;: &quot;non-assignable&quot;, &quot;assignable&quot;: false, &quot;defaultFile&quot;: &quot;sound/default-file.ogg&quot; }, { &quot;name&quot;: &quot;default-file&quot;, &quot;defaultFile&quot;: &quot;sound/default-file.ogg&quot; }, { &quot;name&quot;: &quot;single-channel&quot;, &quot;channels&quot;: 1 } ] } } Your bundle will now have a card on the Mixer page of the Dashboard. defaultFiles are audio files that you ship with your bundle. They will be available to that specific cue as a &quot;Default&quot; option in that cue's dropdown select on the Mixer. channels determines how many instances of a sound can be playing simultaneously. The default value is 100. If set to 1, only one instance can play at a time, and a new instance cannot be started until the currently playing instance has completed. If your bundle has at least one cue that is assignable, it will gain a &quot;Sounds&quot; Asset category. This category accepts .ogg and .mp3 files. Any audio files uploaded to this category will become available as options in all of your assignable cues' dropdown boxes. If your bundle has Sound Cues, the following API methods will be available to your graphic: playSoundstopSoundstopAllSounds","keywords":""},{"title":"Security & Authentication","type":0,"sectionRef":"#","url":"/docs/security","content":"","keywords":""},{"title":"Is NodeCG secure by default?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#is-nodecg-secure-by-default","content":"No. By default, NodeCG has no authorization or authentication of any kind. To enable basic authentication, see the How do I enable login security? section. Do not put an unsecured NodeCG instance on the internet or a public network. Unsecured instances should only be used for local development and on trusted LANs. "},{"title":"What levels of authorization does NodeCG have?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#what-levels-of-authorization-does-nodecg-have","content":"NodeCG has a fairly naive permissions model. There are only two permission levels: Completely unauthorized, with no access to anythingCompletely authorized, with full access to everything This is something we want to improve in the future, but right now this is how things are in NodeCG. &quot;Full access to everything&quot; includes: Read/write access to every Replicant in every bundle Read/write access to every message in every bundle Read access to the full config of every bundle Your bundle configs may include sensitive API keys and passwords. Every user of your NodeCG deployment will have full access to these config values. Therefore, untrusted users must never be given any degree of authorization in your NodeCG instance. They must never be allowed to successfully authenticate with the socket server. If they do, they will have full control over your entire NodeCG instance. "},{"title":"How are users authorized?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#how-are-users-authorized","content":"NodeCG has two ways of authorizing a user: Reading the value of their socketToken cookie.Reading the value of their key URL query parameter. This is why the &quot;COPY URL&quot; buttons on the &quot;Graphics&quot; tab of the dashboard include a ?key=YOUR_KEY at the end of them. It is necessary for the pages to load successfully in OBS. Anyone who gets sent a link which includes a key will have full authorization and access to your NodeCG instance. Treat these links with the same secrecy as you would a password, because that's essentially what they are. "},{"title":"What do I do if one of my keys got leaked?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#what-do-i-do-if-one-of-my-keys-got-leaked","content":"Have the owner of the leaked key navigate to the &quot;Settings&quot; tab on the Dashboard.Click &quot;RESET KEY&quot;, and accept the confirmation dialog. If you are unable to reach the owner of the leaked key: Shutdown your NodeCG instance.Locate the nodecg/db/tokens.db file.Either completely delete this file (which will log out every user and reset their keys), or edit out the specific line containing the key which was leaked.Restart NodeCG. "},{"title":"How do I enable login security?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#how-do-i-enable-login-security","content":"NodeCG has support for four authentication providers: Local Username/Password AuthTwitch AuthDiscord AuthSteam Auth You may have multiple authentication providers enabled simultaneously. "},{"title":"Local Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#local-auth","content":"Configure your nodecg/cfg/nodecg.json as such: { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;local&quot;: { &quot;enabled&quot;: true, &quot;allowedUsers&quot;: [ { &quot;username&quot;: &quot;example1&quot;, &quot;password&quot;: &quot;password_example&quot; }, { &quot;username&quot;: &quot;example2&quot;, &quot;password&quot;: &quot;anotherExample-password1234&quot; } ] } } }  Local authentication also support password hashing by using HMAC. In order to use a password hash, fill the password property with the format &lt;type&gt;:&lt;hash&gt; where &lt;type&gt; is the type (SHA-256, RIPEMD, Whirlpool, ...) and &lt;hash&gt; a valid password hash. For generating a valid password hash, you must use sessionSecret as secret key. If you're looking for a HMAC hash generator, you can use tools like wtools.io for example. Currently, only native Node.js algorithms are supported. Example: { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;local&quot;: { &quot;enabled&quot;: true, &quot;allowedUsers&quot;: [ { &quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;sha256:ac679e332d4eee340b74eb0581225686f2736d58df7ea30c87a0d2cd5bfd1329&quot; }, { &quot;username&quot;: &quot;other_admin&quot;, &quot;password&quot;: &quot;ripemd:6f00f0c4c18fb563921b689876e98b61&quot; } ] } } }  "},{"title":"Twitch Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#twitch-auth","content":"Create a new application on your Twitch Developer DashboardGive it whatever values you want for Name, Category, and Other DetailsSet the OAuth Redirect URL to https://YOUR_DEPLOYMENT_URL/login/auth/twitch. If you're testing locally, use http://localhost:9090/login/auth/twitch Save your Client ID for the next stepClick &quot;New Secret&quot;, and save your client secret for the next stepConfigure your nodecg/cfg/nodecg.json as such: See the Twitch Dev docs for the list of available scopes. { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;twitch&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;YOUR_TWITCH_APP_CLIENT_ID&quot;, &quot;clientSecret&quot;: &quot;YOUR_TWITCH_APP_CLIENT_SECRET&quot;, &quot;scope&quot;: &quot;user:read:email&quot;, &quot;allowedUsernames&quot;: [ &quot;your_twitch_username&quot;, &quot;other_twitch_username&quot;, &quot;can_have_as_many_as_you_want&quot; ], &quot;allowedIds&quot;: [ &quot;your_twitch_id&quot;, &quot;other_twitch_id&quot;, &quot;can_have_as_many_as_you_want&quot; ] } } }  "},{"title":"Discord Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#discord-auth","content":"You can use two different kinds of authentication, by user or by server. You can use one of them or both (in which case matching one of them will grant access). By user​ Create a new application on your Discord Developer DashboardGive it whatever value you want for the NameClick on OAuth2 on the left and Set the OAuth Redirect URL to https://YOUR_DEPLOYMENT_URL/login/auth/discord. If you're testing locally, use http://localhost:9090/login/auth/discord Use the Client ID and Client Secret from general information for your configurationConfigure your nodecg/cfg/nodecg.json like below See the Discord docs for the list of available scopes. To get a Discord user ID, enable Discord developer mode and then right click on a user to copy it. { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;discord&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;YOUR_DISCORD_APP_CLIENT_ID&quot;, &quot;clientSecret&quot;: &quot;YOUR_DISCORD_APP_CLIENT_SECRET&quot;, &quot;scope&quot;: &quot;identify&quot;, &quot;allowedUserIDs&quot;: [ &quot;paste discord user ids you want to allow here&quot;, &quot;they look like this&quot;, &quot;159600065017675778&quot;, &quot;54561421005950976&quot; ] } } }  By Server (Guild)​ Create a new application on your Discord Developer DashboardGive it whatever value you want for the NameUse the Client ID and Client Secret from general information for your configurationClick on OAuth2 on the left and Set the OAuth Redirect URL to https://YOUR_DEPLOYMENT_URL/login/auth/discord. If you're testing locally, use http://localhost:9090/login/auth/discord Configure your nodecg/cfg/nodecg.json like below See the Discord docs for the list of available scopes. Any user in the server will be allowed to use nodecg. If you want to check for roles and not just server membership, you also need to do the following: 5. Click on Bot on the left, add a bot, then use the token for your configuration 6. Go to https://discord.com/oauth2/authorize?client_id={YOUR_CLIENT_ID_HERE}&amp;scope=bot&amp;permissions=0 (insert your Client ID) and invite the Bot to servers that you want to use for authentication (the bot will always display as offline, this is normal) To get a Discord server ID, enable Discord developer mode and then right click on a server to copy it. To get a Discord role ID, enable Discord developer mode and then right click on a role to copy it. { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;discord&quot;: { &quot;enabled&quot;: true, &quot;clientID&quot;: &quot;YOUR_DISCORD_APP_CLIENT_ID&quot;, &quot;clientSecret&quot;: &quot;YOUR_DISCORD_APP_CLIENT_SECRET&quot;, &quot;scope&quot;: &quot;identify guilds&quot;, &quot;allowedGuilds&quot;: [ // Use this to allow all members to log in { &quot;guildID&quot;: &quot;paste a server id here to allow all members to log in&quot;, }, // Use this to restrict log in for certain roles { &quot;guildID&quot;: &quot;paste a server id here to allow members with one of the roles to log in&quot;, &quot;allowedRoleIDs&quot;: [ &quot;paste role ids you want to allow here&quot;, &quot;754751725457637546&quot;, &quot;755012946400378910&quot; ], &quot;guildBotToken&quot;: &quot;paste your Discord BOT token here&quot; } ] } } }  "},{"title":"Steam Auth​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#steam-auth","content":"Create/copy your Steam Web API KeyObtain the SteamID64 string for each of the accounts you wish to allow. https://steamid.io/ is one tool for looking these up. Configure your nodecg/cfg/nodecg.json as such: { &quot;login&quot;: { &quot;enabled&quot;: true, &quot;sessionSecret&quot;: &quot;Make this a random string, like one from https://randomkeygen.com/&quot;, &quot;steam&quot;: { &quot;enabled&quot;: true, &quot;apiKey&quot;: &quot;YOUR_STEAM_WEB_API_KEY&quot;, &quot;allowedIds&quot;: [ &quot;paste the SteamId64s you want to allow here&quot;, &quot;they look like this&quot;, &quot;76561197974943998&quot; ] } } }  "},{"title":"How do I enable HTTPS/SSL encryption?​","type":1,"pageTitle":"Security & Authentication","url":"/docs/security#how-do-i-enable-httpsssl-encryption","content":"Create an SSL certificate if you don't already have one. Creating an SSL cert is out of the scope of this tutorial. You may need to do some Googling if you are unfamiliar with this process. Configure your nodecg/cfg/nodecg.json as such (passphrase is only required if you created your key with one): Restart NodeCG, and confirm that your instance is accessible via HTTPS. { &quot;ssl&quot;: { &quot;enabled&quot;: true, &quot;keyPath&quot;: &quot;C:\\\\example\\\\path\\\\your-cert-key.key&quot;, &quot;certificatePath&quot;: &quot;C:\\\\example\\\\path\\\\your-cert.crt&quot;, &quot;passphrase&quot;: &quot;this is my example passphrase&quot; } }  "},{"title":"Using npm Dependencies","type":0,"sectionRef":"#","url":"/docs/using-npm","content":"Using npm Dependencies danger As of NodeCG v0.9, per-bundle bower and npm dependencies are no longer automatically installed. It is up to the user to run whatever installation commands are necessary in each bundle. Install npm dependencies as you would in any other Node.js project. Extensions can then access these dependencies directly, via normal require statements: bundles/my-bundle/package.json { &quot;name&quot;: &quot;my-bundle&quot;, ... &quot;dependencies&quot;: { &quot;some-dep&quot;: &quot;^1.0.0&quot; } } bundles/my-bundle/extension.js const someDep = require('some-dep'); module.exports = function(nodecg) { // I can use someDep whenever I want! }; ","keywords":""},{"title":"What is NodeCG?","type":0,"sectionRef":"#","url":"/docs/what-is-nodecg","content":"","keywords":""},{"title":"Goals​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#goals","content":"The NodeCG project exists to accomplish the following goals: Make broadcast graphics (also known as &quot;character generation&quot; or &quot;CG&quot;) more accessible.Remain as close to the web platform as possible.Support broadcasts of any size and ambition. Let's unpack what these statements mean: "},{"title":"> Make broadcast graphics (also known as \"character generation\" or \"CG\") more accessible​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#-make-broadcast-graphics-also-known-as-character-generation-or-cg-more-accessible","content":"Historically, broadcast graphics have been expensive. They either required expensive hardware, expensive software, or both. NodeCG was originally created to provide real-time broadcast graphics for Tip of the Hats, which is an all-volunteer charity fundraiser that had a budget of \\$0 for its first several years. Now, it is possible to create an ambitious broadcast using entirely free software and consumer hardware. The NodeCG project embraces this democratization of broadcast technology. "},{"title":"> Remain as close to the web platform as possible​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#-remain-as-close-to-the-web-platform-as-possible","content":"NodeCG graphics are just webpages. There is absolutely nothing special or unique about them. This is their greatest strength. By building on the web platform, and not building too many abstractions on top of it, people developing broadcast graphics with NodeCG have access to the raw potential of the web. New APIs and capabilities are continually being added to the web platform, and NodeCG developers should have access to the entirety of what the web can offer. "},{"title":"> Support broadcasts of any size and ambition​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#-support-broadcasts-of-any-size-and-ambition","content":"NodeCG's roots are in small broadcasts with no budget. More recently, NodeCG has begun seeing use in increasingly elaborate productions. We believe that one set of tools can and should be able to scale up from the smallest show all the way to the biggest fathomable show. Whether you're using OBS for everything, or a hardware switcher with a traditional key/fill workflow, NodeCG can be a part of any broadcast graphics system. "},{"title":"Maintainers​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#maintainers","content":"Alex &quot;Lange&quot; Van CampMatt &quot;Bluee&quot; McNamaraKeiichiro &quot;Hoishin&quot; Amemiya "},{"title":"Designers​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#designers","content":"Chris Hanel "},{"title":"Acknowledgements​","type":1,"pageTitle":"What is NodeCG?","url":"/docs/what-is-nodecg#acknowledgements","content":"Atmo, original dashboard concept and code, the inspiration for toth-overlayAlex &quot;Lange&quot; Van Camp, designer &amp; developer of toth-overlay, the base on which NodeCG was built "}]